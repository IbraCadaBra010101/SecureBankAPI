// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealEstateAPI.Data;

#nullable disable

namespace RealEstateAPI.Migrations
{
    [DbContext(typeof(RealEstateDbContext))]
    [Migration("20250828120345_FastighetsDB1")]
    partial class FastighetsDB1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RealEstateAPI.Models.Apartment", b =>
                {
                    b.Property<Guid>("ApartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LeaseEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LeaseStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RentPerMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Rooms")
                        .HasColumnType("int");

                    b.HasKey("ApartmentId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Apartments");

                    b.HasData(
                        new
                        {
                            ApartmentId = new Guid("f437fd52-af7a-4f50-baea-4a31467ef24b"),
                            Address = "Storgatan 1, Stockholm",
                            CompanyId = new Guid("c009e702-4806-47fc-83b6-c056418492fe"),
                            Floor = 2,
                            IsOccupied = true,
                            LeaseEndDate = new DateTime(2025, 10, 28, 12, 3, 44, 774, DateTimeKind.Utc).AddTicks(598),
                            LeaseStartDate = new DateTime(2024, 8, 28, 12, 3, 44, 774, DateTimeKind.Utc).AddTicks(590),
                            RentPerMonth = 12000m,
                            Rooms = 2
                        },
                        new
                        {
                            ApartmentId = new Guid("de5e1fee-f23b-498d-823a-139daef7625e"),
                            Address = "Lilla Nygatan 5, Stockholm",
                            CompanyId = new Guid("c009e702-4806-47fc-83b6-c056418492fe"),
                            Floor = 5,
                            IsOccupied = true,
                            LeaseEndDate = new DateTime(2026, 4, 28, 12, 3, 44, 774, DateTimeKind.Utc).AddTicks(603),
                            LeaseStartDate = new DateTime(2023, 8, 28, 12, 3, 44, 774, DateTimeKind.Utc).AddTicks(602),
                            RentPerMonth = 16500m,
                            Rooms = 3
                        },
                        new
                        {
                            ApartmentId = new Guid("76a40193-b6d0-407a-ac9c-0e3c00850e7c"),
                            Address = "Avenyn 10, Göteborg",
                            CompanyId = new Guid("bc62289a-fa3e-473e-a2a1-c0f3fd8d0d8d"),
                            Floor = 3,
                            IsOccupied = false,
                            LeaseEndDate = new DateTime(2025, 9, 28, 12, 3, 44, 774, DateTimeKind.Utc).AddTicks(606),
                            LeaseStartDate = new DateTime(2024, 10, 28, 12, 3, 44, 774, DateTimeKind.Utc).AddTicks(605),
                            RentPerMonth = 9500m,
                            Rooms = 1
                        },
                        new
                        {
                            ApartmentId = new Guid("72579826-b4e3-4940-9f30-1636d73288ad"),
                            Address = "Linnégatan 22, Göteborg",
                            CompanyId = new Guid("bc62289a-fa3e-473e-a2a1-c0f3fd8d0d8d"),
                            Floor = 4,
                            IsOccupied = true,
                            LeaseEndDate = new DateTime(2025, 11, 28, 12, 3, 44, 774, DateTimeKind.Utc).AddTicks(609),
                            LeaseStartDate = new DateTime(2024, 5, 28, 12, 3, 44, 774, DateTimeKind.Utc).AddTicks(608),
                            RentPerMonth = 11250m,
                            Rooms = 2
                        },
                        new
                        {
                            ApartmentId = new Guid("a44efcf4-162c-4d33-bcf3-8637c173cd55"),
                            Address = "Södra Vägen 7, Malmö",
                            CompanyId = new Guid("cb0f419b-bab2-4364-9048-7a875aab2677"),
                            Floor = 1,
                            IsOccupied = true,
                            LeaseEndDate = new DateTime(2026, 1, 28, 12, 3, 44, 774, DateTimeKind.Utc).AddTicks(611),
                            LeaseStartDate = new DateTime(2022, 8, 28, 12, 3, 44, 774, DateTimeKind.Utc).AddTicks(611),
                            RentPerMonth = 8200m,
                            Rooms = 1
                        },
                        new
                        {
                            ApartmentId = new Guid("e775375f-3fe8-45dd-8fa6-0d4d8c04bf0e"),
                            Address = "Kungsportsavenyen 3, Malmö",
                            CompanyId = new Guid("cb0f419b-bab2-4364-9048-7a875aab2677"),
                            Floor = 6,
                            IsOccupied = true,
                            LeaseEndDate = new DateTime(2025, 9, 28, 12, 3, 44, 774, DateTimeKind.Utc).AddTicks(614),
                            LeaseStartDate = new DateTime(2024, 8, 28, 12, 3, 44, 774, DateTimeKind.Utc).AddTicks(613),
                            RentPerMonth = 18950m,
                            Rooms = 4
                        },
                        new
                        {
                            ApartmentId = new Guid("c71316e7-b6f5-4ddd-a1da-449352c2fbb5"),
                            Address = "Sveavägen 100, Stockholm",
                            CompanyId = new Guid("41c47814-079a-45b1-9969-e12ba6707636"),
                            Floor = 7,
                            IsOccupied = false,
                            LeaseEndDate = new DateTime(2026, 7, 28, 12, 3, 44, 774, DateTimeKind.Utc).AddTicks(616),
                            LeaseStartDate = new DateTime(2025, 2, 28, 12, 3, 44, 774, DateTimeKind.Utc).AddTicks(615),
                            RentPerMonth = 17200m,
                            Rooms = 3
                        });
                });

            modelBuilder.Entity("RealEstateAPI.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = new Guid("c009e702-4806-47fc-83b6-c056418492fe"),
                            Email = "info@nordicestates.se",
                            Name = "Nordic Estates AB",
                            OrganizationNumber = "556000-0001",
                            PhoneNumber = "+46 8 123 456"
                        },
                        new
                        {
                            CompanyId = new Guid("bc62289a-fa3e-473e-a2a1-c0f3fd8d0d8d"),
                            Email = "contact@cityhomes.se",
                            Name = "City Homes Sverige",
                            OrganizationNumber = "556000-0002",
                            PhoneNumber = "+46 31 987 654"
                        },
                        new
                        {
                            CompanyId = new Guid("cb0f419b-bab2-4364-9048-7a875aab2677"),
                            Email = "info@riksbyggen.se",
                            Name = "Riksbyggen Testfastigheter",
                            OrganizationNumber = "716000-0003",
                            PhoneNumber = "+46 10 123 45 67"
                        },
                        new
                        {
                            CompanyId = new Guid("41c47814-079a-45b1-9969-e12ba6707636"),
                            Email = "kontakt@skandiabostad.se",
                            Name = "Skandia Bostad",
                            OrganizationNumber = "556000-0004",
                            PhoneNumber = "+46 8 765 432"
                        });
                });

            modelBuilder.Entity("RealEstateAPI.Models.Apartment", b =>
                {
                    b.HasOne("RealEstateAPI.Models.Company", "Company")
                        .WithMany("Apartments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RealEstateAPI.Models.Company", b =>
                {
                    b.Navigation("Apartments");
                });
#pragma warning restore 612, 618
        }
    }
}
