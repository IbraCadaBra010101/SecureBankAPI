@page "/"
@using RealEstateAPI.Services
@inject HttpClient Http
@inject TitleService TitleService

<PageTitle>Fastighet AB</PageTitle>


<div class="card mb-3">
    <div class="card-body">
        <div class="row g-3 align-items-center">
            <div class="col-auto">
                <label class="col-form-label">Company</label>
            </div>
            <div class="col-auto">
                <select class="form-select" style="min-width:260px" @bind=SelectedCompanyId @bind:after="OnCompanyChanged">
                    @foreach (var c in Companies)
                    {
                        <option value="@c.CompanyId">@c.Name</option>
                    }
                </select>
            </div>
        </div>
    </div>
</div>

@if (IsLoading)
{
    <div class="d-flex align-items-center"><div class="spinner-border spinner-border-sm me-2" role="status"></div> Loading...</div>
}
else
{
    <div class="card">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover table-sm align-middle m-0">
                    <thead class="table-light">
                        <tr>
                            <th scope="col">Address</th>
                            <th scope="col" class="text-center">Rooms</th>
                            <th scope="col" class="text-end">Rent / mo</th>
                            <th scope="col" class="text-center">Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var a in Apartments)
                        {
                            var isExp = ExpiringApartmentIds.Contains(a.ApartmentId);
                            <tr>
                                <td>@a.Address</td>
                                <td class="text-center">@a.Rooms</td>
                                <td class="text-end">@a.RentPerMonth.ToString("N0") SEK</td>
                                <td class="text-center">
                                    @if (isExp)
                                    {
                                        <span class="badge bg-danger">Expiring â‰¤ 3 months</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-success">Active</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    public class CompanyVm
    {
        public Guid CompanyId { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    public class ApartmentVm
    {
        public Guid ApartmentId { get; set; }
        public string Address { get; set; } = string.Empty;
        public int Rooms { get; set; }
        public decimal RentPerMonth { get; set; }
    }

    private List<CompanyVm> Companies { get; set; } = new();
    private List<ApartmentVm> Apartments { get; set; } = new();
    private HashSet<Guid> ExpiringApartmentIds { get; set; } = new();
    private string? Error { get; set; }
    private bool IsLoading { get; set; }
    private Guid SelectedCompanyId { get; set; }

    private string SelectedCompanyName => Companies.FirstOrDefault(c => c.CompanyId == SelectedCompanyId)?.Name ?? string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCompaniesAsync();
        if (Companies.Count > 0)
        {
            SelectedCompanyId = Companies[0].CompanyId;
            await LoadApartmentsAsync();
        }
        UpdatePageTitle();
    }

    private async Task LoadCompaniesAsync()
    {
        Error = null;
        try
        {
            Companies = await Http.GetFromJsonAsync<List<CompanyVm>>("/api/RealEstate/companies") ?? new();
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

    private async Task LoadApartmentsAsync()
    {
        if (SelectedCompanyId == Guid.Empty) { return; }
        IsLoading = true;
        Error = null;
        try
        {
            var all = await Http.GetFromJsonAsync<List<ApartmentVm>>($"/api/RealEstate/companies/{SelectedCompanyId}/apartments") ?? new();
            var exp = await Http.GetFromJsonAsync<List<ApartmentVm>>($"/api/RealEstate/companies/{SelectedCompanyId}/contracts/expiring?months=3") ?? new();
            Apartments = all;
            ExpiringApartmentIds = new HashSet<Guid>(exp.Select(a => a.ApartmentId));
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task OnCompanyChanged()
    {
        await LoadApartmentsAsync();
        UpdatePageTitle();
    }

    private void UpdatePageTitle()
    {
        if (!string.IsNullOrEmpty(SelectedCompanyName))
        {
            TitleService.SetTitle($"Apartments for {SelectedCompanyName}");
        }
        else
        {
            TitleService.ClearTitle();
        }
    }
}


